name: Comprehensive Theme Validation

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  comprehensive-theme-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: تحميل الكود من المستودع
      uses: actions/checkout@v3

    - name: التحقق من الهيكل الأساسي
      run: |
        echo "📁 التحقق من هيكل القالب المتكامل..."
        
        # الملفات الأساسية الإلزامية
        REQUIRED_FILES=("style.css" "index.php" "functions.php")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ ملف إلزامي غير موجود: $file"
            exit 1
          fi
          echo "✅ موجود: $file"
        done

    - name: إعداد Node.js للفحص
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: فحص شامل لملفات JavaScript
      run: |
        echo "🔍 فحص ملفات JavaScript والمكتبات..."
        
        # البحث عن جميع ملفات JavaScript
        JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./.github/*")
        
        if [ -z "$JS_FILES" ]; then
          echo "⚪ لم يتم العثور على أي ملفات JavaScript"
          exit 0
        fi
        
        echo "📊 عدد ملفات JavaScript الموجودة: $(echo "$JS_FILES" | wc -l)"
        
        # فحص وجود المكتبات الشائعة
        echo "🔎 البحث عن المكتبات الشائعة:"
        
        LIBRARIES=("jquery" "react" "vue" "axios" "lodash" "bootstrap" "swiper" "gsap")
        for lib in "${LIBRARIES[@]}"; do
          if grep -r -i "$lib" . --include="*.js" --include="*.php" --exclude-dir=node_modules --exclude-dir=.git > /dev/null; then
            echo "✅ موجودة: $lib"
          else
            echo "⚪ غير موجودة: $lib"
          fi
        done

    - name: فحص جودة JavaScript
      run: |
        echo "🛠️ فحص جودة كود JavaScript..."
        
        # إنشاء package.json مؤقت إذا لم يكن موجوداً
        if [ ! -f "package.json" ]; then
          echo '{"name":"temp-check","version":"1.0.0"}' > package.json
        fi
        
        # تثبيت ESLint للفحص إذا لزم الأمر
        npm install eslint --no-save --no-package-lock
        
        # فحص الملفات باستخدام ESLint
        JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./.github/*")
        for js_file in $JS_FILES; do
          echo "🔍 فحص ملف: $js_file"
          npx eslint --no-eslintrc --env browser "$js_file" --format compact || true
        done

    - name: فحص التبعيات والمكتبات
      run: |
        echo "📦 فحص تبعيات JavaScript..."
        
        # البحث عن مكتبات مضمنة عبر CDN
        echo "🌐 المكتبات المضمنة عبر CDN:"
        grep -r -i "cdn\.\|cloudflare\.\|unpkg\.\|stackpath\.bootstrapcdn" . --include="*.php" --include="*.js" --include="*.html" || echo "⚪ لا توجد مكتبات CDN"
        
        # البحث عن استدعاءات مكتبات خارجية
        echo "📡 الاستدعاءات الخارجية:"
        grep -r -E "(http|https)://.*\.js" . --include="*.php" --include="*.js" --include="*.html" | head -10 || echo "⚪ لا توجد استدعاءات خارجية"

    - name: فحص أداء JavaScript
      run: |
        echo "⚡ فحص أداء JavaScript..."
        
        # التحقق من حجم ملفات JavaScript
        JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./.github/*")
        for js_file in $JS_FILES; do
          size=$(wc -c < "$js_file")
          if [ "$size" -gt 1000000 ]; then
            echo "⚠️  ملف كبير: $js_file ($((size/1000)) KB)"
          else
            echo "✅ حجم مناسب: $js_file ($((size/1000)) KB)"
          fi
        done

    - name: فحص الأمان
      run: |
        echo "🔒 فحص أمان JavaScript..."
        
        # البحث عن أنماط قد تكون خطيرة
        PATTERNS=("eval(" "innerHTML" "document\.write" "setTimeout(" "setInterval(")
        for pattern in "${PATTERNS[@]}"; do
          echo "🔍 البحث عن: $pattern"
          grep -r -n "$pattern" . --include="*.js" --exclude-dir=node_modules --exclude-dir=.git | head -5 || echo "⚪ لا توجد نتائج"
        done

    - name: إنشاء تقرير شامل
      run: |
        echo "📋 تقرير JavaScript الشامل:"
        echo "=========================================="
        
        JS_COUNT=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./.github/*" | wc -l)
        echo "📊 عدد ملفات JavaScript: $JS_COUNT"
        
        PHP_JS_REFS=$(grep -r -l "wp_enqueue_script\|wp_register_script" . --include="*.php" | wc -l)
        echo "🔄 عدد ملفات PHP التي تسجل scripts: $PHP_JS_REFS"
        
        echo "=========================================="
        echo "✅ تم الانتهاء من الفحص الشامل لـ JavaScript"

    - name: فحص مكونات القالب المتقدمة
      run: |
        echo "🔍 البحث عن مكونات متقدمة (Slider, Hero, etc)..."
        
        # البحث عن ملفات قد تحتوي على Slider
        SLIDER_FILES=$(grep -l -i "slider\|carousel" *.php template-parts/*.php 2>/dev/null || true)
        if [ -n "$SLIDER_FILES" ]; then
          echo "🎠 ملفات تحتوي على Slider:"
          echo "$SLIDER_FILES"
        else
          echo "⚪ لم يتم العثور على مكون Slider"
        fi

    - name: فحص شامل للألوان والتصميم
      run: |
        echo "🎨 فحص نظام الألوان والتصميم..."
        
        CSS_FILES=$(find . -name "*.css" -not -path "./.github/*")
        if [ -n "$CSS_FILES" ]; then
          echo "📊 تقرير الألوان المستخدمة:"
          grep -E -i "(#([0-9A-Fa-f]{6}|[0-9A-Fa-f]{3})|rgb\(|rgba\(|hsl\()" $(echo "$CSS_FILES") | \
          sort | uniq | head -15
        else
          echo "⚪ لا توجد ملفات CSS للفحص"
        fi

    - name: تقرير نهائي
      run: |
        echo "🎉 تم الانتهاء من الفحص الشامل!"
        echo "📋 النتائج تشمل:"
        echo "   - ✅ هيكل القالب الأساسي"
        echo "   - 🔍 ملفات JavaScript والمكتبات"
        echo "   - 🛠️  جودة كود JavaScript"
        echo "   - 📦 التبعيات والمكتبات"
        echo "   - ⚡ أداء JavaScript"
        echo "   - 🔒 أمان JavaScript"
        echo "   - 🎠 المكونات المتقدمة"
        echo "   - 🎨 نظام الألوان"
